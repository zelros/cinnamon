```python, echo=False, evaluate=True, name='Import libraries and read file'
#!/usr/bin/env python
# coding: utf-8


import matplotlib.pyplot as plt
import pickle as pkl

with open('report_data.pkl', 'rb') as f:
    report_data = pkl.load(f)
    drift_explainer = report_data['drift_explainer']
    min_cat_weight = report_data['min_cat_weight']

# const
n_drift_importances = 10
```

# 1. Drift of the ground truth target

```python, echo=False, evaluate=True, name='Drift of the ground truth target'
if drift_explainer.y1 is None or drift_explainer.y2 is None:
    print('"y1" or "y2" argument was not passed to drift_explainer.fit method')
else:
    drift_explainer.plot_target_drift(min_cat_weight)
```

```python, echo=False, evaluate=True, name='Drift of the ground truth target'
if drift_explainer.target_drift is not None:
    print(drift_explainer.target_drift)
```


# 2. Drift of the distribution of predictions

# 2.1 Description of the drift

```python, echo=False, evaluate=True, name='Drift of the ground truth target'
if drift_explainer.prediction_drift is None:
    print('None')
else:
    if drift_explainer.model_objective == 'multiclass_classification':
        for i, label in enumerate(drift_explainer.parsed_model.class_names):
            if i > 0:
                print('\n')
            print(f'Class: {label}\n')
            plt.hist(drift_explainer.predictions1[:, i], bins=100, density=True, alpha=0.3)
            plt.hist(drift_explainer.predictions2[:, i], bins=100, density=True, alpha=0.3)
            plt.title(f'{label}')
            plt.legend(['dataset1', 'dataset2'])
            plt.show()

            print(f"Wasserstein distance: {drift_explainer.prediction_drift[i]['wasserstein']}")
            print(f"Kolmogorov Smirnov test: {drift_explainer.prediction_drift[i]['ks_test']}")
```

# 2.2 Explanation of the drift: feature contributions

Top <%= n_drift_importances %> features in drift contributions

```python, echo=False, evaluate=True, name='Drift of the ground truth target'
drift_explainer.plot_drift_importances(n=n_drift_importances)
```

# 3. Drift of each input feature

```python, echo=False, evaluate=True, name='Drift of the ground truth target'
for i, feature_name in enumerate(drift_explainer.feature_names):
    drift_explainer.plot_feature_drift(feature_name, min_cat_weight)
    if i > 0: print('')
    print(f'Feature: {feature_name}')
    if feature_name in drift_explainer.cat_features:
          print(f"Wasserstein distance for cat: {drift_explainer.feature_drifts[i]['wasserstein']}")
          print(f"Chi2 test: {drift_explainer.feature_drifts[i]['chi2_test']}")
    else:
        print(f"Wasserstein distance: {drift_explainer.feature_drifts[i]['wasserstein']}")
        print(f"Kolmogorov Smirnov test: {drift_explainer.feature_drifts[i]['ks_test']}")
```
